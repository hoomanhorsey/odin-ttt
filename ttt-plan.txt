// Gameboard object IIFE

*** gameboard object ***

variables
- board - declares an empty board, within newBoard()

methods
- newBoard() - generates new empty board
- addPiece() - adds new pieces to board, but also checks whether move is possible
- getBoard() - returns copy of board

check if returned { yes }


*** Player factor function ***

variables
- name - takes playername arg and allocates name

methods
- getName() - gets name // TODO is it necessary?
- setMarker() - takes input, sets marker // TODO is it necessary?
- getMarker() - gets marker // TODO is it necessary?

check if returned { yes }



*** gameControl object *** 

variables
- hard codes variables for game start declared in 'initialize()' method
    - playerOne
    - playerTwo
    - winner = 'No Winner Yet'
    - active Player = playerOne
        returns the above
    // TODO - Do in need to put this into a function? Maybe to keep it all private?
    
methods
- restartGame() - calls newBoard, but that's it at the moment
- changeActivePlayer() - changes activePlayer to different player. 
            // TODO But doesn't seem to be returned at the moment

- winnerMessage() - returns winner Message based on 'winner' arg 
            // TODO could probably fold this into checkWin()
- setWinner() - sets winner from 'newWinner' arg
- getWinner() - returns winner

- getActivePlayer() - gets name of activePlayer

- playRound() - plays round by:
    - calls checkBoardTurn()
    - calls addPiece()
    - calls checkWin()
        - if no winner, 
            - changes activeplayer 
            // TODO Does this make change active Player redundant?
            // Or should I call the changeActivePlayer() here?
        - if Winner, 
            - sets Winner

-checkWin() - checks win by:
    - checking rows
    - checking columns
    - checking diagonals
    - check for tie
    - if no winner, returns 'No Winner Yet'
    



*** screenController ***

methods

- displayWinner()
    - document query selects:
        - turnID = '.turnID'
        - gameStatusDisplay = '.gameStatusDisplay.
        - clickToPlayAgain = '.reset'
    - create elements
        - DOMwinMessage

    Event Listener attached to clickToPlayAgain /'.reset'
    - clickToPlayAgain()
        - calls newBoard()
        - calls updateScreen()
        - remove winMessage
        - update turnID
        - calls clickHandlerCell()

- clickHandlerCell()

    Event Listener attached to cells / .cell
    - handleClick()
        - calls playBoardRound()
        - calls updateScreen()    

- updateScreen()
        document query selects:
            - gameStatusDisplay
        create elements
            -  turn turnID

        render board (outside of any function)

        checks for winner via getWinner()
            if no winner:
                - calls clickHandlerCell
            if winner:
                - calls displayWinner()




const screenController  = (function () {

    let boardDisplay = document.querySelector('.boardDisplay'); 

    const displayWinner = function (winMessage){
        let gameStatusDisplay  = document.querySelector('gameStatusDisplay'); 

        let turnID  = document.querySelector('.turnID'); 
        turnID.textContent = ' ';
 
        winnerMessage = document.querySelector('gameStatusDisplay');

        let DOMwinMessage = document.createElement('p')
        console.log(winMessage)    

        DOMwinMessage.setAttribute('class', 'winMessage')              
        DOMwinMessage.textContent = winMessage;
        gameStatusDisplay.appendChild(DOMwinMessage);
        
        // let playAgain = document.createElement('p')
        // playAgain.setAttribute('class', 'playAgain')  
        // playAgain.textContent = "Click to play again!"
        // whoseTurn.appendChild(playAgain);

        clickToPlayAgain = document.querySelector('.reset');
        clickToPlayAgain.addEventListener('click', () => {

            //Consider putting this into a restart function, mindful that you'll need to include all the object names of each method
            alert('restart game')
            // gameControl.restartGame();
            gameboard.newBoard();
            updateScreen('restart game');
            
            // const playAgain = document.querySelector(".playAgain");
            // playAgain.remove();
            const winMessage = document.querySelector(".winMessage");
            winMessage.remove();

            const turnID = document.querySelector(".turnID");
            turnID.textContent = gameControl.getActivePlayer() + "'s turn."          

            clickHandlerCell();
        } )
    }

    const clickHandlerCell = () => {         

        let cells = document.querySelectorAll('.cell');
        cells.forEach((e) => {
            e.addEventListener('click', handleClick);
            console.log('added the cell event listener')
                        
            function handleClick(e) {
               
                gameControl.playBoardRound(e.target.dataset.index);
                updateScreen(' from clickHandlerCell 2nd time')
                // setTimeout(function() {
                     
                //     // winMessage = gameControl.winnerMessage(winner);
                //         if (winMessage !== undefined) {
                //         displayWinner(winMessage);
                        
                //         alert('we have winner')
                //         removeCellEventListener(cells);    
                                                
                //         function removeCellEventListener() {
                //             // let bells = document.querySelectorAll('.cell');

                //             alert('we have called remove Event Listener')
                //             cells.forEach( bell => {
                //                 console.log(bell)
                //                 bell.removeEventListener('click', handleClick);
                //             })
                //         }
                //     }}, 50);
                } 
        
    })
    }

    // const clickHandlerCell = () => {

    //     let cells = document.querySelectorAll('.cell');
    //     cells.forEach((e) => {
    //         e.addEventListener('click', (e) => {
    //         // console.log(e.target)    
    //         // console.log(e.target.dataset.index)

    //         gameControl.playBoardRound(e.target.dataset.index);
    //         updateScreen(' from clickHandlerCell 2nd time')
    //         setTimeout(function() {
    //             winner = gameControl.checkWin();
    //             winMessage = gameControl.winnerMessage(winner);
    //                 if (winMessage !== undefined) {
    //                 displayWinner(winMessage);
                    
    //                 function removeCellEventListener () {
    //                     cells.forEach( cell => {
    //                         cell.removeEventListener()
    //                     })
    //                 }
    //                 removeCellEventListener();
    //                 }}, 50);
    //         } 
    //     )})
    // };

    const updateScreen = (message) => {  
        
        // clear board

        console.log('calling updateScreen() from ' + message)
        boardDisplay.textContent = ' ';
        let board = gameboard.getBoard();

        console.table(board);

        // display player turn
        let gameStatusDisplay  = document.querySelector('.gameStatusDisplay');
        let turnID = document.createElement('p')
        turnID.setAttribute('class', 'turnID')              
        turnID.textContent = gameControl.getActivePlayer() +  "'s turn.";
        gameStatusDisplay.textContent = ' ';    
        gameStatusDisplay.appendChild(turnID);
    
        // render board
        console.log('rendering process started')
        for (let b = 0; b < 3; b++) {
            let row = document.createElement('div');
            row.setAttribute('class', 'row')        
            boardDisplay.appendChild(row);    
    
            for (let n = 0; n < 3; n++) {
                let cell = document.createElement('p');
                cell.textContent = board[b][n];                       
                cell.classList.add('cell', 'cell-'+ b + n);
                cell.setAttribute('data-index', [b,n]);
                row.appendChild(cell);
                }}      

        // TODO, currently restarts clickHandler, but perhaps it only should if there is no winner. 
        // i.e. if winner === 'No Winner Yet'
        // clickHandlerCell()

        console.log('gamecontrol get winner' +gameControl.getWinner())
        // Maybe this function re: winner test needs to be elsewhere?
        if (gameControl.getWinner() === 'No Winner Yet') {
            console.log('process winner?'+ gameControl.getWinner())
            clickHandlerCell();
                } else {
                console.log('winner? Need to update winner display screen' + gameControl.getWinner())    
                console.log('need to also insert a start again button?')
                winMessage = gameControl.winnerMessage(gameControl.getWinner())
                displayWinner(winMessage);
                }
             }   
        console.log('Is there a winner' )//+ winner)

             return {updateScreen, clickHandlerCell}

})(); // end of screenController function

screenController.updateScreen(' from global');


}) // end of DOM load function




